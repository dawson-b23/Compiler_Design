#DRBC OpK
#DRBC Func: main returns type void [mem: Global loc: 0 size: -2] [line: 93]
#DRBC .   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 93]
#DRBC .   .   Child: 1  Op: <= of type bool [line: 94]
#DRBC .   .   .   Child: 0  Const 2 of type int [line: 94]
#DRBC .   .   .   Child: 1  Const 2 of type int [line: 94]
#DRBC .   .   Sibling: 1  Op: < of type bool [line: 95]
#DRBC .   .   .   Child: 0  Const 2 of type int [line: 95]
#DRBC .   .   .   Child: 1  Const 2 of type int [line: 95]
#DRBC .   .   Sibling: 2  Op: > of type bool [line: 96]
#DRBC .   .   .   Child: 0  Const 2 of type int [line: 96]
#DRBC .   .   .   Child: 1  Const 2 of type int [line: 96]
#DRBC .   .   Sibling: 3  Op: >= of type bool [line: 97]
#DRBC .   .   .   Child: 0  Const 2 of type int [line: 97]
#DRBC .   .   .   Child: 1  Const 2 of type int [line: 97]
#DRBC .   .   Sibling: 4  Op: == of type bool [line: 98]
#DRBC .   .   .   Child: 0  Const 2 of type int [line: 98]
#DRBC .   .   .   Child: 1  Const 2 of type int [line: 98]
#DRBC .   .   Sibling: 5  Op: != of type bool [line: 99]
#DRBC .   .   .   Child: 0  Const 2 of type int [line: 99]
#DRBC .   .   .   Child: 1  Const 2 of type int [line: 99]
#DRBC .   .   Sibling: 6  Op: + of type int [line: 100]
#DRBC .   .   .   Child: 0  Const 2 of type int [line: 100]
#DRBC .   .   .   Child: 1  Const 2 of type int [line: 100]
#DRBC .   .   Sibling: 7  Op: - of type int [line: 101]
#DRBC .   .   .   Child: 0  Const 2 of type int [line: 101]
#DRBC .   .   .   Child: 1  Const 2 of type int [line: 101]
#DRBC .   .   Sibling: 8  Op: * of type int [line: 102]
#DRBC .   .   .   Child: 0  Const 2 of type int [line: 102]
#DRBC .   .   .   Child: 1  Const 2 of type int [line: 102]
#DRBC .   .   Sibling: 9  Op: % of type int [line: 103]
#DRBC .   .   .   Child: 0  Const 2 of type int [line: 103]
#DRBC .   .   .   Child: 1  Const 2 of type int [line: 103]
#DRBC .   .   Sibling: 10  Op: / of type int [line: 104]
#DRBC .   .   .   Child: 0  Const 2 of type int [line: 104]
#DRBC .   .   .   Child: 1  Const 2 of type int [line: 104]
#DRBC ======================================================
#DRBC See test0OpK0.bC for the first 7 lines of each section
#DRBC These are all binary operators so they have 2 children
#DRBC ======================================================
#DRBC * EXPRESSION                                                  
#DRBC LDC  3,2(6)     Load integer constant                 
#DRBC ST  3,-2(1)    Push left side                        
#DRBC * TOFF dec: -3                                                
#DRBC LDC  3,2(6)     Load integer constant                 
#DRBC * TOFF inc: -2                                                
#DRBC LD  4,-2(1)    Pop left into ac1                     
#DRBC TLE  3,4,3      Op <=                      OpK: attr.op = LEQ           
#DRBC * EXPRESSION                                                  
#DRBC LDC  3,2(6)     Load integer constant                
#DRBC ST  3,-2(1)    Push left side                        
#DRBC * TOFF dec: -3                                                
#DRBC LDC  3,2(6)     Load integer constant                 
#DRBC * TOFF inc: -2                                                
#DRBC LD  4,-2(1)    Pop left into ac1                     
#DRBC TLT  3,4,3      Op <                       OpK: attr.op = '<'           
#DRBC * EXPRESSION                                                  
#DRBC LDC  3,2(6)     Load integer constant                 
#DRBC ST  3,-2(1)    Push left side                        
#DRBC * TOFF dec: -3                                                
#DRBC LDC  3,2(6)     Load integer constant                 
#DRBC * TOFF inc: -2                                                
#DRBC LD  4,-2(1)    Pop left into ac1                     
#DRBC TGT  3,4,3      Op >                       OpK: attr.op = '>'           
#DRBC * EXPRESSION                                                  
#DRBC LDC  3,2(6)     Load integer constant                 
#DRBC ST  3,-2(1)    Push left side                        
#DRBC * TOFF dec: -3                                                
#DRBC LDC  3,2(6)     Load integer constant                 
#DRBC * TOFF inc: -2                                                
#DRBC LD  4,-2(1)    Pop left into ac1                     
#DRBC TGE  3,4,3      Op >=                      OpK: attr.op = GEQ          
#DRBC * EXPRESSION                                                  
#DRBC LDC  3,2(6)     Load integer constant                 
#DRBC ST  3,-2(1)    Push left side                        
#DRBC * TOFF dec: -3                                                
#DRBC LDC  3,2(6)     Load integer constant                 
#DRBC * TOFF inc: -2                                                
#DRBC LD  4,-2(1)    Pop left into ac1                     
#DRBC TEQ  3,4,3      Op ==                      OpK: attr.op = EQ           
#DRBC * EXPRESSION                                                  
#DRBC LDC  3,2(6)     Load integer constant                 
#DRBC ST  3,-2(1)    Push left side                        
#DRBC * TOFF dec: -3                                                
#DRBC LDC  3,2(6)     Load integer constant                 
#DRBC * TOFF inc: -2                                                
#DRBC LD  4,-2(1)    Pop left into ac1                     
#DRBC TNE  3,4,3      Op !=                      OpK: attr.op = NEQ           
#DRBC * EXPRESSION                                                  
#DRBC LDC  3,2(6)     Load integer constant                 
#DRBC ST  3,-2(1)    Push left side                        
#DRBC * TOFF dec: -3                                                
#DRBC LDC  3,2(6)     Load integer constant                 
#DRBC * TOFF inc: -2                                                
#DRBC LD  4,-2(1)    Pop left into ac1                     
#DRBC ADD  3,4,3      Op +                       OpK: attr.op = '+'           
#DRBC * EXPRESSION                                                  
#DRBC LDC  3,2(6)     Load integer constant                 
#DRBC ST  3,-2(1)    Push left side                        
#DRBC * TOFF dec: -3                                                
#DRBC LDC  3,2(6)     Load integer constant                 
#DRBC * TOFF inc: -2                                                
#DRBC LD  4,-2(1)    Pop left into ac1                     
#DRBC SUB  3,4,3      Op -                        OpK: attr.op = '-'          
#DRBC * EXPRESSION                                                  
#DRBC LDC  3,2(6)     Load integer constant                 
#DRBC ST  3,-2(1)    Push left side                        
#DRBC * TOFF dec: -3                                                
#DRBC LDC  3,2(6)     Load integer constant                 
#DRBC * TOFF inc: -2                                                
#DRBC LD  4,-2(1)    Pop left into ac1                     
#DRBC MUL  3,4,3      Op *                        OpK: attr.op = '*'          
#DRBC * EXPRESSION                                                  
#DRBC LDC  3,2(6)     Load integer constant                 
#DRBC ST  3,-2(1)    Push left side                        
#DRBC * TOFF dec: -3                                                
#DRBC LDC  3,2(6)     Load integer constant                 
#DRBC * TOFF inc: -2                                                
#DRBC LD  4,-2(1)    Pop left into ac1                     
#DRBC MOD  3,4,3      Op %                        OpK: attr.op = '%'          
#DRBC * EXPRESSION                                                  
#DRBC LDC  3,2(6)     Load integer constant                 
#DRBC ST  3,-2(1)    Push left side                        
#DRBC * TOFF dec: -3                                                
#DRBC LDC  3,2(6)     Load integer constant                 
#DRBC * TOFF inc: -2                                                
#DRBC LD  4,-2(1)    Pop left into ac1                     
#DRBC DIV  3,4,3      Op /                        OpK: attr.op = '/'         

main() {
   2 <= 2;
   2 < 2;
   2 > 2;
   2 >= 2;
   2 == 2;
   2 != 2;
   2 + 2;
   2 - 2;
   2 * 2;
   2 % 2;
   2 / 2;
}
